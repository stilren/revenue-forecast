{"version":3,"sources":["Churn.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["churnA","x","fallOff","getData","montlyUserGrowth","numberOfMonths","array","Array","i","fill","j","reduce","r","a","map","b","theme","global","colors","brand","font","family","size","height","AppBar","props","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","App","state","showSidebar","cohorts","id","name","montlyUser","churn","months","Number","isNaN","parseInt","console","log","this","setState","prevState","filter","c","stackData","func","_","toString","y","Grommet","full","ResponsiveContext","Consumer","Heading","level","margin","Button","icon","Edit","onClick","flex","overflow","horizontal","Grid","V","material","interpolation","data","DataTable","columns","property","header","Text","primary","Layer","FormClose","render","cohort","Trash","deleteCohort","Form","onSubmit","event","concat","value","parseInput","monthlyChurn","monthlyGrowth","FormField","label","type","TextInput","placeholder","onChange","val","target","Collapsible","open","width","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f00d7c6c.chunk.js","sourcesContent":["import { Cohort } from \"./App\";\r\n\r\nexport function churnA(x: number, fallOff: number): number {\r\n  return x * (1 - fallOff / 100);\r\n}\r\n\r\nexport function getData(\r\n  montlyUserGrowth: number,\r\n  numberOfMonths: number,\r\n  fallOff: number\r\n): number[] {\r\n  let array = new Array(numberOfMonths);\r\n  for (let i = 0; i < numberOfMonths; i++) {\r\n    array[i] = new Array(numberOfMonths).fill(0);\r\n  }\r\n  for (let i = 0; i < numberOfMonths; i++) {\r\n    array[i][i] = montlyUserGrowth;\r\n  }\r\n  for (let i = 0; i < numberOfMonths; i++) {\r\n    for (let j = 0; j < numberOfMonths; j++) {\r\n      if (j !== 0) {\r\n        array[i][j] =\r\n          array[i][j - 1] !== 0\r\n            ? churnA(array[i][j - 1], fallOff)\r\n            : array[i][j];\r\n      }\r\n    }\r\n  }\r\n  var sum = (r: number[], a: number[]) => r.map((b, i) => a[i] + b);\r\n  return array.reduce(sum);\r\n}\r\n\r\nexport function getStackData(\r\n  cohorts: Cohort[],\r\n  numberOfMonths: number\r\n): { x: string; y: number }[][] {\r\n  var cohortFuncs = cohorts.map(c => ({\r\n    name: c.name,\r\n    func: getData(c.montlyUser, numberOfMonths, c.churn)\r\n  }));\r\n  let res = cohortFuncs.map((c, i) =>\r\n    c.func.map((_, j) => ({ x: j.toString(), y: c.func[j] }))\r\n  );\r\n  return res;\r\n}\r\n","import React, { Component, SyntheticEvent } from \"react\";\nimport {\n  Box,\n  Button,\n  Collapsible,\n  Heading,\n  Grommet,\n  Layer,\n  ResponsiveContext,\n  TextInput,\n  Text,\n  DataTable,\n  Meter,\n  Distribution,\n  Grid,\n  Form,\n  FormField\n} from \"grommet\";\nimport { FormClose, Edit, Trash } from \"grommet-icons\";\nimport * as V from \"victory\";\nimport { VictoryBar, VictoryArea } from \"victory\";\nimport { getData, getStackData } from \"./Churn\";\n\nconst theme = {\n  global: {\n    colors: {\n      brand: \"#228BE6\"\n    },\n    font: {\n      family: \"Roboto\",\n      size: \"14px\",\n      height: \"20px\"\n    }\n  }\n};\n\n//@ts-ignore\nconst AppBar = props => (\n  <Box\n    tag=\"header\"\n    direction=\"row\"\n    align=\"center\"\n    justify=\"between\"\n    background=\"brand\"\n    pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n    elevation=\"medium\"\n    style={{ zIndex: \"1\" }}\n    {...props}\n  />\n);\n\ntype State = {\n  showSidebar: boolean;\n  months: number;\n  cohorts: Cohort[];\n};\n\nexport type Cohort = {\n  name: string;\n  montlyUser: number;\n  churn: number;\n  id: string;\n};\n\nclass App extends Component<{}, State> {\n  state = {\n    showSidebar: false,\n    cohorts: [\n      { id: \"1\", name: \"A\", montlyUser: 100, churn: 30 },\n      { id: \"2\", name: \"B\", montlyUser: 50, churn: 10 },\n      { id: \"3\", name: \"C\", montlyUser: 100, churn: 20 }\n    ],\n    months: 12\n  };\n  parseInput(x: string): number {\n    return Number.isNaN(parseInt(x)) ? 0 : parseInt(x);\n  }\n  deleteCohort(id: string) {\n    console.log(\"deleteing \" + id);\n    this.setState(prevState => ({\n      ...prevState,\n      cohorts: prevState.cohorts.filter(c => c.id !== id)\n    }));\n  }\n  render() {\n    console.log(this.state.cohorts);\n    const stackData = getStackData(this.state.cohorts, this.state.months);\n    console.log(stackData);\n    const { showSidebar } = this.state;\n    return (\n      <Grommet theme={theme} full>\n        <ResponsiveContext.Consumer>\n          {size => (\n            <Box fill>\n              <AppBar>\n                <Heading level=\"3\" margin=\"none\">\n                  Revenue forecast\n                </Heading>\n                <Button\n                  icon={<Edit />}\n                  onClick={() =>\n                    this.setState({ showSidebar: !this.state.showSidebar })\n                  }\n                />\n              </AppBar>\n              <Box direction=\"row\" flex overflow={{ horizontal: \"hidden\" }}>\n                <Box flex align=\"center\">\n                  <Grid>\n                    <V.VictoryChart theme={V.VictoryTheme.material}>\n                      <V.VictoryStack theme={V.VictoryTheme.material}>\n                        {stackData.map(c => {\n                          return (\n                            <VictoryArea interpolation=\"natural\" data={c} />\n                          );\n                        })}\n                      </V.VictoryStack>\n                    </V.VictoryChart>\n                    <DataTable\n                      columns={[\n                        {\n                          property: \"name\",\n                          header: <Text>Name</Text>,\n                          primary: true\n                        },\n                        {\n                          property: \"montlyUser\",\n                          header: <Text>Monthly user growth</Text>,\n                          primary: true\n                        },\n                        {\n                          property: \"churn\",\n                          header: <Text>Monthly churn (%)</Text>,\n                          primary: true\n                        }\n                      ]}\n                      data={this.state.cohorts}\n                    />\n                  </Grid>\n                </Box>\n                <Box />\n                {!showSidebar || size !== \"small\" ? (\n                  <Collapsible\n                    direction=\"horizontal\"\n                    open={this.state.showSidebar}\n                  >\n                    <Box\n                      flex\n                      width=\"large\"\n                      background=\"light-3\"\n                      elevation=\"small\"\n                      align=\"center\"\n                      justify=\"center\"\n                    >\n                      <Grid>\n                        <DataTable\n                          columns={[\n                            {\n                              property: \"name\",\n                              header: <Text>Name</Text>,\n                              primary: true\n                            },\n                            {\n                              property: \"montlyUser\",\n                              header: <Text>Growth</Text>,\n                              primary: true\n                            },\n                            {\n                              property: \"churn\",\n                              header: <Text>Churn</Text>,\n                              primary: true\n                            },\n                            {\n                              property: \"id\",\n                              primary: true,\n                              render: cohort => (\n                                <Button\n                                  icon={<Trash />}\n                                  onClick={() => this.deleteCohort(cohort.id)}\n                                />\n                              )\n                            }\n                          ]}\n                          data={this.state.cohorts}\n                        />\n                        <Form\n                          onSubmit={(event: SyntheticEvent) => {\n                            console.log(event);\n                            this.setState(prevState => {\n                              return {\n                                ...prevState,\n                                cohorts: prevState.cohorts.concat([\n                                  {\n                                    //@ts-ignore\n                                    name: event.value.name,\n                                    //@ts-ignore\n                                    id: event.value.name,\n                                    //@ts-ignore\n                                    churn: event.value.monthlyChurn,\n                                    //@ts-ignore\n                                    montlyUser: event.value.monthlyGrowth\n                                  }\n                                ])\n                              };\n                            });\n                          }}\n                        >\n                          <Heading level=\"3\" margin=\"none\">\n                            Add cohort\n                          </Heading>\n                          <FormField name=\"name\" label=\"Name\" />\n                          <FormField\n                            name=\"monthlyGrowth\"\n                            label=\"Monthly user growth\"\n                          />\n                          <FormField\n                            name=\"monthlyChurn\"\n                            label=\"Monthly churn\"\n                          />\n                          <Button type=\"submit\" primary label=\"Submit\" />\n                        </Form>\n                      </Grid>\n                    </Box>\n                  </Collapsible>\n                ) : (\n                  <Layer>\n                    <Box\n                      background=\"light-2\"\n                      tag=\"header\"\n                      justify=\"end\"\n                      align=\"center\"\n                      direction=\"row\"\n                    >\n                      <Button\n                        icon={<FormClose />}\n                        onClick={() => this.setState({ showSidebar: false })}\n                      />\n                    </Box>\n                    <Box fill background=\"light-2\">\n                      <Grid>\n                        <DataTable\n                          columns={[\n                            {\n                              property: \"name\",\n                              header: <Text>Name</Text>,\n                              primary: true\n                            },\n                            {\n                              property: \"montlyUser\",\n                              header: <Text>Growth</Text>,\n                              primary: true\n                            },\n                            {\n                              property: \"churn\",\n                              header: <Text>Churn</Text>,\n                              primary: true\n                            },\n                            {\n                              property: \"id\",\n                              primary: true,\n                              render: cohort => (\n                                <Button\n                                  icon={<Trash />}\n                                  onClick={() => this.deleteCohort(cohort.id)}\n                                />\n                              )\n                            }\n                          ]}\n                          data={this.state.cohorts}\n                        />\n                        <Form\n                          onSubmit={(event: SyntheticEvent) => {\n                            this.setState(prevState => {\n                              return {\n                                ...prevState,\n                                cohorts: prevState.cohorts.concat([\n                                  {\n                                    //@ts-ignore\n                                    name: event.value.name,\n                                    //@ts-ignore\n                                    id: event.value.name,\n                                    churn: this.parseInput(\n                                      //@ts-ignore\n                                      event.value.monthlyChurn\n                                    ),\n                                    montlyUser: this.parseInput(\n                                      //@ts-ignore\n                                      event.value.monthlyGrowth\n                                    )\n                                  }\n                                ])\n                              };\n                            });\n                          }}\n                        >\n                          <Heading level=\"3\" margin=\"none\">\n                            Add cohort\n                          </Heading>\n                          <FormField name=\"name\" label=\"Name\" />\n                          <FormField\n                            name=\"monthlyGrowth\"\n                            label=\"Monthly user growth\"\n                          />\n                          <FormField\n                            name=\"monthlyChurn\"\n                            label=\"Monthly churn (%)\"\n                          />\n                          <Button type=\"submit\" primary label=\"Submit\" />\n                        </Form>\n                        <Form>\n                          <Heading level=\"3\" margin=\"none\">\n                            Change months\n                          </Heading>\n                          <TextInput\n                            placeholder=\"type here\"\n                            value={this.state.months}\n                            onChange={event => {\n                              const val = Number.isNaN(\n                                this.parseInput(event.target.value)\n                              )\n                                ? 0\n                                : this.parseInput(event.target.value);\n                              this.setState(() => ({\n                                months: val\n                              }));\n                            }}\n                          />\n                        </Form>\n                      </Grid>\n                    </Box>\n                  </Layer>\n                )}\n              </Box>\n            </Box>\n          )}\n        </ResponsiveContext.Consumer>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}